"What can have a scoring"
union Scoreable = Participant | Team
"The scoring of a participant or a team"
type Scoring implements Node & UserCreated {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  "The Group of this Scoring"
  group: Group!
  "The value that was scored"
  value: Int!
  "Who scored the value"
  of: Scoreable!

  "The attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this entity"
  createdAt: DateTime!
  "The last time this entity was updated"
  updatedAt: DateTime!
  "The user who created this entity"
  createdBy: User!
  "The user who last updated this entity"
  updatedBy: User!
  "The full AuditLog of this entity"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
"Connection type of Scoring"
type ScoringConnection {
  "The count of all scorings in this connection"
  count: Int!
  "The retrieved edges"
  edges: [ScoringEdge!]!
  "The PageInfo to this Connection"
  pageInfo: PageInfo!
}
"Edge type of Scoring"
type ScoringEdge {
  "The pagination cursor of this edge"
  cursor: PaginationCursor!
  "The node of this edge"
  node: Scoring!
}
