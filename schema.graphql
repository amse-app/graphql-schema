type User implements Node & UserCreated {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  "The globally unique username"
  username: String!
  "The (real) name of the user"
  name: String!
  "The preferred nickname of the user"
  nickname: String!
  "The events of the user"
  events(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): UserEventsRelConnection!

  "the attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this user"
  createdAt: DateTime!
  "The last time this user was updated"
  updatedAt: DateTime!
  "The user who created this user"
  createdBy: User!
  "The user who last updated this user"
  updatedBy: User!
  "the full AuditLog of this user"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
type UserConnection {
  count: Int!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}
type UserEdge {
  cursor: PaginationCursor!
  node: User!
}

type UserEventsRel implements Node & UserCreated {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  event: Event!
  user: User!
  permissions: [Permission!]!

  "The creation date of this UsersEventsRel"
  createdAt: DateTime!
  "The last time this UsersEventsRel was updated"
  updatedAt: DateTime!
  "The user who created this UsersEventsRel"
  createdBy: User!
  "The user who last updated this UsersEventsRel"
  updatedBy: User!
  "the full AuditLog of this UsersEventsRel"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
type UserEventsRelConnection {
  count: Int!
  edges: [UserEventsRelEdge!]!
  pageInfo: PageInfo!
}
type UserEventsRelEdge {
  cursor: PaginationCursor!
  node: UserEventsRel!
}
directive @auth(
  perm: [Permission!]! = []
  public: Boolean = false
) on FIELD_DEFINITION
"All possible permissions of a user"
enum Permission {
  "Create, update, delete users"
  WRITE_USERS
  "read users"
  READ_USERS
  "update, delete the own profile"
  WRITE_PROFILE
  "read the own profile"
  READ_PROFILE
}
"The amse tid scalar; serialized to a string"
scalar AmseTID

"A Date serialized as int in milliseconds since unix epoch"
scalar Date

"A Date with time serialized as int in milliseconds since unix epoch"
scalar DateTime

"A Duration in milliseconds"
scalar Duration

"The Node interface for refetching"
interface Node {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!
}

"The interface for user created and managed entities"
interface UserCreated {
  "the attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this entity"
  createdAt: DateTime!
  "The last time this entity was updated"
  updatedAt: DateTime!
  "The user who created this entity"
  createdBy: User!
  "The user who last updated this entity"
  updatedBy: User!
  "the full AuditLog of this entity"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}

"id with a length of 4; unique in one event"
scalar Short

interface ShortIdentifiable implements Node & UserCreated {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  "short id"
  short: Short!
  "name"
  name: String!
  "description"
  description: String

  "the attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this entity"
  createdAt: DateTime!
  "The last time this entity was updated"
  updatedAt: DateTime!
  "The user who created this entity"
  createdBy: User!
  "The user who last updated this entity"
  updatedBy: User!
  "the full AuditLog of this entity"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
"The root query type"
type Query {
  event(id: String!): Event
  events(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): EventConnection!

  users(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): UserConnection!
}
"PageInfo type according to the Relay Cursor Connections Specification"
type PageInfo {
  "Tells if a previous page is availabe"
  hasPreviousPage: Boolean!
  "Tells if a next page is available"
  hasNextPage: Boolean!
  "The first cursor of the corresponding edges"
  startCursor: String!
  "The last cursor of the corresponding edges"
  endCursor: String!
}
"The scalar of the PaginationCursors"
scalar PaginationCursor
type Team implements Node & UserCreated & ShortIdentifiable {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  "short id"
  short: Short!
  "name"
  name: String!
  "description"
  description: String

  participants(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): ParticipantConnection!
  scorings(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): ScoringConnection!

  "the attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this entity"
  createdAt: DateTime!
  "The last time this entity was updated"
  updatedAt: DateTime!
  "The user who created this entity"
  createdBy: User!
  "The user who last updated this entity"
  updatedBy: User!
  "the full AuditLog of this entity"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
type TeamConnection {
  count: Int!
  edges: [TeamEdge!]!
  pageInfo: PageInfo!
}
type TeamEdge {
  cursor: PaginationCursor!
  node: Team!
}
type AuditEntry implements Node {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  of: Node!
  by: User!
  at: DateTime!
  entity: String!
  oldValue: String!
  newValue: String!
  to: Node
  action: AuditAction!
}
enum AuditAction {
  CREATE
  UPDATE_FIELD
  UPDATE_RELATION
  ARCHIVED
}
type AuditConnection {
  count: Int!
  edges: [AuditEntryEdge!]!
  pageInfo: PageInfo!
}
type AuditEntryEdge {
  cursor: PaginationCursor!
  node: AuditEntry!
}
type Result implements Node & UserCreated {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  competitionDiscipline: CompetitionDisciplineRel
  participant: Participant!
  raw: Int!
  points: Int!

  "the attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this entity"
  createdAt: DateTime!
  "The last time this entity was updated"
  updatedAt: DateTime!
  "The user who created this entity"
  createdBy: User!
  "The user who last updated this entity"
  updatedBy: User!
  "the full AuditLog of this entity"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
type ResultConnection {
  count: Int!
  edges: [ResultEdge!]!
  pageInfo: PageInfo!
}
type ResultEdge {
  cursor: PaginationCursor!
  node: Result!
}
type Competition implements Node & UserCreated & ShortIdentifiable {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  "short id"
  short: Short!

  "name of the competition"
  name: String!
  "description of the competition"
  description: String

  "all disciplines connected to this competition"
  disciplines(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): CompetitionDisciplineRelConnection!
  "all groups of this competition"
  groups(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): GroupConnection!
  "all participants assigned to this competition"
  participants(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): ParticipantConnection!

  "the attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this entity"
  createdAt: DateTime!
  "The last time this entity was updated"
  updatedAt: DateTime!
  "The user who created this entity"
  createdBy: User!
  "The user who last updated this entity"
  updatedBy: User!
  "the full AuditLog of this entity"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
type CompetitionConnection {
  count: Int!
  edges: [CompetitionEdge!]!
  pageInfo: PageInfo!
}
type CompetitionEdge {
  cursor: PaginationCursor!
  node: Competition!
}

type CompetitionDisciplineRel implements Node & UserCreated {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  competition: Competition!
  discipline: Discipline!
  results(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): ResultConnection!
  qualification: Boolean!
  position: Int!

  "the attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this entity"
  createdAt: DateTime!
  "The last time this entity was updated"
  updatedAt: DateTime!
  "The user who created this entity"
  createdBy: User!
  "The user who last updated this entity"
  updatedBy: User!
  "the full AuditLog of this entity"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
type CompetitionDisciplineRelConnection {
  count: Int!
  edges: [CompetitionDisciplineRelEdge!]!
  pageInfo: PageInfo!
}
type CompetitionDisciplineRelEdge {
  cursor: PaginationCursor!
  node: CompetitionDisciplineRel!
}
type Participant implements Node & UserCreated {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  "id"
  id: String!
  "name"
  name: String!
  birthdate: Date
  sex: ParticipantSex

  groups(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): GroupConnection!
  competitions(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): CompetitionConnection!
  team: Team!
  results(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): ResultConnection!
  scorings(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): ScoringConnection!

  "the attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this entity"
  createdAt: DateTime!
  "The last time this entity was updated"
  updatedAt: DateTime!
  "The user who created this entity"
  createdBy: User!
  "The user who last updated this entity"
  updatedBy: User!
  "the full AuditLog of this entity"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
type ParticipantConnection {
  count: Int!
  edges: [ParticipantEdge!]!
  pageInfo: PageInfo!
}
type ParticipantEdge {
  cursor: PaginationCursor!
  node: Participant!
}
enum ParticipantSex {
  MALE
  FEMALE
  DIVERSE
}
scalar ConversionFunction

type Discipline implements Node & UserCreated & ShortIdentifiable {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  "short id"
  short: Short!
  "name"
  name: String!
  "description"
  description: String

  conversionFunction: ConversionFunction!

  competitions(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): CompetitionDisciplineRelConnection!

  subject: DisciplineSubject!
  unit: DisciplineUnit!
  rounds: Int!
  grouping: Int!
  hasPenalties: Boolean!

  "the attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this entity"
  createdAt: DateTime!
  "The last time this entity was updated"
  updatedAt: DateTime!
  "The user who created this entity"
  createdBy: User!
  "The user who last updated this entity"
  updatedBy: User!
  "the full AuditLog of this entity"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
type DisciplineConnection {
  count: Int!
  edges: [DisciplineEdge!]!
  pageInfo: PageInfo!
}
type DisciplineEdge {
  cursor: PaginationCursor!
  node: Discipline!
}
enum DisciplineSubject {
  TIME
  RUNS
  DISTANCE
  POINTS
  OTHER
}
enum DisciplineUnit {
  MICROSECONDS
  MILLISECONDS
  SECONDS
  MINUTES
  HOURS

  MILLIMETER
  METER
  KILOMETER

  UNITLESS

  OTHER
}
scalar GroupAssignCriteria
type Group implements Node & UserCreated & ShortIdentifiable {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  "short id"
  short: Short!
  "name"
  name: String!
  "description"
  description: String

  competition: Competition!
  participants(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): ParticipantConnection!
  teams(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): TeamConnection!
  participantScorings(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): ScoringConnection!
  teamScorings(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): ScoringConnection!
  """
  The assign criteria for this group;
  only a field because graphql doesn't support nesting.
  This is a concrete part of the object and only accessible through it.
  """
  assignCriteria: GroupAssignCriteria!

  "the attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this entity"
  createdAt: DateTime!
  "The last time this entity was updated"
  updatedAt: DateTime!
  "The user who created this entity"
  createdBy: User!
  "The user who last updated this entity"
  updatedBy: User!
  "the full AuditLog of this entity"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
type GroupConnection {
  count: Int!
  edges: [GroupEdge!]!
  pageInfo: PageInfo!
}
type GroupEdge {
  cursor: PaginationCursor!
  node: Group!
}
type Attribute implements Node & UserCreated {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  id: String!
  name: String!
  description: String
  special: Boolean!
  of: [AttributeLocation!]!
  values(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!

  "the attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this entity"
  createdAt: DateTime!
  "The last time this entity was updated"
  updatedAt: DateTime!
  "The user who created this entity"
  createdBy: User!
  "The user who last updated this entity"
  updatedBy: User!
  "the full AuditLog of this entity"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
type AttributeConnection {
  count: Int!
  edges: [AttributeEdge!]!
  pageInfo: PageInfo!
}
type AttributeEdge {
  cursor: PaginationCursor!
  node: Attribute!
}
enum AttributeLocation {
  DISCIPLINE
  COMPETITION
  GROUP
  TEAM
  PARTICIPANT
  RESULT
  AUDIT
  SCORING
  USER
  EVENT
}

type AttributeValue implements Node & UserCreated {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  value: String!
  attribute: Attribute!
  node: Node!

  "the attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this entity"
  createdAt: DateTime!
  "The last time this entity was updated"
  updatedAt: DateTime!
  "The user who created this entity"
  createdBy: User!
  "The user who last updated this entity"
  updatedBy: User!
  "the full AuditLog of this entity"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
type AttributeValueConnection {
  count: Int!
  edges: [AttributeValueEdge!]!
  pageInfo: PageInfo!
}
type AttributeValueEdge {
  cursor: PaginationCursor!
  node: AttributeValue!
}
union Scoreable = Participant | Team
type Scoring implements Node & UserCreated {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness check"
  tid: AmseTID!

  group: Group!
  value: Int!
  of: Scoreable!

  "the attributes of this entity"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this entity"
  createdAt: DateTime!
  "The last time this entity was updated"
  updatedAt: DateTime!
  "The user who created this entity"
  createdBy: User!
  "The user who last updated this entity"
  updatedBy: User!
  "the full AuditLog of this entity"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}
type ScoringConnection {
  count: Int!
  edges: [ScoringEdge!]!
  pageInfo: PageInfo!
}
type ScoringEdge {
  cursor: PaginationCursor!
  node: Scoring!
}
"Events are the clients of the application, which seperate data across the graph"
type Event implements Node & UserCreated {
  "Globally unique id"
  gid: ID!
  "Globally unique id with timeliness"
  tid: AmseTID!

  "unique identifier for this event"
  id: String!
  "name of this event"
  name: String!
  "description of this event"
  description: String

  "The user responsible for this event"
  owner: User!

  "The full AuditLog of all items part of this event, except users"
  fullAuditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!

  "The competitions of this event"
  competitions(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): CompetitionConnection!
  "The disciplines of this event"
  disciplines(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): DisciplineConnection!
  "The groups of this event"
  groups(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): GroupConnection!
  "The participants of this event"
  participants(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): ParticipantConnection!
  "The teams of this event"
  teams(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): TeamConnection!
  "The Users with access to this event"
  users(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): UserEventsRelConnection!
  "The attributes of this event (entity)"
  attributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeValueConnection!
  "The results of this event"
  results(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): ResultConnection!
  "The scorings of this event"
  scorings(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): ScoringConnection!

  "Get an ShortIdentifiable bu its short"
  short(short: Short!): ShortIdentifiable

  "Get all attributes in this event not in this event-entity"
  allAttributes(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AttributeConnection!

  "Wether this entity is archived"
  archived: Boolean!
  "The creation date of this event"
  createdAt: DateTime!
  "The last time this event was updated"
  updatedAt: DateTime!
  "The user who created this event"
  createdBy: User!
  "The last user who modified this event"
  updatedBy: User!
  "The complete auditLog regarding this event object"
  auditLog(
    before: PaginationCursor
    after: PaginationCursor
    first: Int
    last: Int
  ): AuditConnection!
}

"The Event connection-type"
type EventConnection {
  "Count of the returned events"
  count: Int!
  "The EventEdges"
  edges: [EventEdge!]!
  "The according PageInfo"
  pageInfo: PageInfo!
}

"The Event edge-type"
type EventEdge {
  "The PaginationCursor of this Edge"
  cursor: PaginationCursor!
  "The Node of this Edge"
  node: Event!
}
